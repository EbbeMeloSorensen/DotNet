// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PR.Persistence.EntityFrameworkCore.SqlServer;

#nullable disable

namespace PR.Persistence.EntityFrameworkCore.SqlServer.Migrations
{
    [DbContext(typeof(PRDbContext))]
    partial class PRDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.CoordinateSystems.CoordinateSystem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("CoordinateSystems");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.Line.LinePoint", b =>
                {
                    b.Property<Guid>("LineID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<Guid>("PointId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SequenceQuantity")
                        .HasColumnType("int");

                    b.HasKey("LineID", "Index");

                    b.HasIndex("PointId");

                    b.ToTable("LinePoints");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.VerticalDistance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Dimension")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("VerticalDistances");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.ObjectItems.ObjectItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AlternativeIdentificationText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ObjectItems");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("PR.Domain.Entities.PR.Person", b =>
                {
                    b.Property<Guid>("ArchiveID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Dead")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Superseded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArchiveID");

                    b.ToTable("People");
                });

            modelBuilder.Entity("PR.Domain.Entities.PR.PersonComment", b =>
                {
                    b.Property<Guid>("ArchiveID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonArchiveID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Superseded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArchiveID");

                    b.HasIndex("PersonArchiveID");

                    b.ToTable("PersonComments");
                });

            modelBuilder.Entity("PR.Domain.Entities.Smurfs.Smurf", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Smurfs");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.CoordinateSystems.PointReference", b =>
                {
                    b.HasBaseType("PR.Domain.Entities.C2IEDM.Geometry.CoordinateSystems.CoordinateSystem");

                    b.Property<Guid>("OriginPointID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("XVectorPointID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("YVectorPointID")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("OriginPointID");

                    b.HasIndex("XVectorPointID");

                    b.HasIndex("YVectorPointID");

                    b.ToTable("PointReferences");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.GeometricVolumes.GeometricVolume", b =>
                {
                    b.HasBaseType("PR.Domain.Entities.C2IEDM.Geometry.Locations.Location");

                    b.Property<Guid?>("LowerVerticalDistanceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpperVerticalDistanceID")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("LowerVerticalDistanceID");

                    b.HasIndex("UpperVerticalDistanceID");

                    b.ToTable("GeometricVolumes");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.Line.Line", b =>
                {
                    b.HasBaseType("PR.Domain.Entities.C2IEDM.Geometry.Locations.Location");

                    b.ToTable("Lines");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.Points.Point", b =>
                {
                    b.HasBaseType("PR.Domain.Entities.C2IEDM.Geometry.Locations.Location");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.Surface", b =>
                {
                    b.HasBaseType("PR.Domain.Entities.C2IEDM.Geometry.Locations.Location");

                    b.ToTable("Surfaces");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.ObjectItems.Organisations.Organisation", b =>
                {
                    b.HasBaseType("PR.Domain.Entities.C2IEDM.ObjectItems.ObjectItem");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.GeometricVolumes.ConeVolume", b =>
                {
                    b.HasBaseType("PR.Domain.Entities.C2IEDM.Geometry.Locations.GeometricVolumes.GeometricVolume");

                    b.Property<Guid>("DefiningSurfaceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VertexPointID")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("DefiningSurfaceID");

                    b.HasIndex("VertexPointID");

                    b.ToTable("ConeVolumes");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.GeometricVolumes.SphereVolume", b =>
                {
                    b.HasBaseType("PR.Domain.Entities.C2IEDM.Geometry.Locations.GeometricVolumes.GeometricVolume");

                    b.Property<Guid>("CentrePointID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("RadiusDimension")
                        .HasColumnType("float");

                    b.HasIndex("CentrePointID");

                    b.ToTable("SphereVolumes");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.GeometricVolumes.SurfaceVolume", b =>
                {
                    b.HasBaseType("PR.Domain.Entities.C2IEDM.Geometry.Locations.GeometricVolumes.GeometricVolume");

                    b.Property<Guid>("DefiningSurfaceID")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("DefiningSurfaceID");

                    b.ToTable("SurfaceVolumes");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.Points.AbsolutePoint", b =>
                {
                    b.HasBaseType("PR.Domain.Entities.C2IEDM.Geometry.Locations.Points.Point");

                    b.Property<double>("LatitudeCoordinate")
                        .HasColumnType("float");

                    b.Property<double>("LongitudeCoordinate")
                        .HasColumnType("float");

                    b.Property<Guid?>("VerticalDistanceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("VerticalDistanceId");

                    b.ToTable("AbsolutePoints");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.Points.RelativePoint", b =>
                {
                    b.HasBaseType("PR.Domain.Entities.C2IEDM.Geometry.Locations.Points.Point");

                    b.Property<Guid>("CoordinateSystemID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("XCoordinateDimension")
                        .HasColumnType("float");

                    b.Property<double>("YCoordinateDimension")
                        .HasColumnType("float");

                    b.Property<double>("ZCoordinateDimension")
                        .HasColumnType("float");

                    b.HasIndex("CoordinateSystemID");

                    b.ToTable("RelativePoints");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.CorridorArea", b =>
                {
                    b.HasBaseType("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.Surface");

                    b.Property<Guid>("CenterLineID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("WidthDimension")
                        .HasColumnType("float");

                    b.HasIndex("CenterLineID");

                    b.ToTable("CorridorAreas");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.Ellipse", b =>
                {
                    b.HasBaseType("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.Surface");

                    b.Property<Guid>("CentrePointID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FirstConjugateDiameterPointID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SecondConjugateDiameterPointID")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CentrePointID");

                    b.HasIndex("FirstConjugateDiameterPointID");

                    b.HasIndex("SecondConjugateDiameterPointID");

                    b.ToTable("Ellipses");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.FanArea", b =>
                {
                    b.HasBaseType("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.Surface");

                    b.Property<double>("MaximumRangeDimension")
                        .HasColumnType("float");

                    b.Property<double>("MinimumRangeDimension")
                        .HasColumnType("float");

                    b.Property<double>("OrientationAngle")
                        .HasColumnType("float");

                    b.Property<double>("SectorSizeAngle")
                        .HasColumnType("float");

                    b.Property<Guid>("VertexPointID")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("VertexPointID");

                    b.ToTable("FanAreas");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.OrbitArea", b =>
                {
                    b.HasBaseType("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.Surface");

                    b.Property<Guid>("FirstPointID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrbitAreaAlignmentCode")
                        .HasColumnType("int");

                    b.Property<Guid>("SecondPointID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("WidthDimension")
                        .HasColumnType("float");

                    b.HasIndex("FirstPointID");

                    b.HasIndex("SecondPointID");

                    b.ToTable("OrbitAreas");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.PolyArcArea", b =>
                {
                    b.HasBaseType("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.Surface");

                    b.Property<double>("ArcRadiusDimension")
                        .HasColumnType("float");

                    b.Property<Guid>("BearingOriginPointID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("BeginBearingAngle")
                        .HasColumnType("float");

                    b.Property<Guid>("DefiningLineID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("EndBearingAngle")
                        .HasColumnType("float");

                    b.HasIndex("BearingOriginPointID");

                    b.HasIndex("DefiningLineID");

                    b.ToTable("PolyArcAreas");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.PolygonArea", b =>
                {
                    b.HasBaseType("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.Surface");

                    b.Property<Guid>("BoundingLineID")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("BoundingLineID");

                    b.ToTable("PolygonAreas");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.TrackArea", b =>
                {
                    b.HasBaseType("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.Surface");

                    b.Property<Guid>("BeginPointID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EndPointID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("LeftWidthDimension")
                        .HasColumnType("float");

                    b.Property<double>("RightWidthDimension")
                        .HasColumnType("float");

                    b.HasIndex("BeginPointID");

                    b.HasIndex("EndPointID");

                    b.ToTable("TrackAreas");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.ObjectItems.Organisations.Unit", b =>
                {
                    b.HasBaseType("PR.Domain.Entities.C2IEDM.ObjectItems.Organisations.Organisation");

                    b.Property<string>("FormalAbbreviatedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.Line.LinePoint", b =>
                {
                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Line.Line", "Line")
                        .WithMany("LinePoints")
                        .HasForeignKey("LineID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Points.Point", "Point")
                        .WithMany()
                        .HasForeignKey("PointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Line");

                    b.Navigation("Point");
                });

            modelBuilder.Entity("PR.Domain.Entities.PR.PersonComment", b =>
                {
                    b.HasOne("PR.Domain.Entities.PR.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonArchiveID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Person");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.CoordinateSystems.PointReference", b =>
                {
                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.CoordinateSystems.CoordinateSystem", null)
                        .WithOne()
                        .HasForeignKey("PR.Domain.Entities.C2IEDM.Geometry.CoordinateSystems.PointReference", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Points.Point", "OriginPoint")
                        .WithMany()
                        .HasForeignKey("OriginPointID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Points.Point", "XVectorPoint")
                        .WithMany()
                        .HasForeignKey("XVectorPointID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Points.Point", "YVectorPoint")
                        .WithMany()
                        .HasForeignKey("YVectorPointID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OriginPoint");

                    b.Navigation("XVectorPoint");

                    b.Navigation("YVectorPoint");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.GeometricVolumes.GeometricVolume", b =>
                {
                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Location", null)
                        .WithOne()
                        .HasForeignKey("PR.Domain.Entities.C2IEDM.Geometry.Locations.GeometricVolumes.GeometricVolume", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.VerticalDistance", "LowerVerticalDistance")
                        .WithMany()
                        .HasForeignKey("LowerVerticalDistanceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.VerticalDistance", "UpperVerticalDistance")
                        .WithMany()
                        .HasForeignKey("UpperVerticalDistanceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LowerVerticalDistance");

                    b.Navigation("UpperVerticalDistance");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.Line.Line", b =>
                {
                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Location", null)
                        .WithOne()
                        .HasForeignKey("PR.Domain.Entities.C2IEDM.Geometry.Locations.Line.Line", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.Points.Point", b =>
                {
                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Location", null)
                        .WithOne()
                        .HasForeignKey("PR.Domain.Entities.C2IEDM.Geometry.Locations.Points.Point", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.Surface", b =>
                {
                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Location", null)
                        .WithOne()
                        .HasForeignKey("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.Surface", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.ObjectItems.Organisations.Organisation", b =>
                {
                    b.HasOne("PR.Domain.Entities.C2IEDM.ObjectItems.ObjectItem", null)
                        .WithOne()
                        .HasForeignKey("PR.Domain.Entities.C2IEDM.ObjectItems.Organisations.Organisation", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.GeometricVolumes.ConeVolume", b =>
                {
                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.Surface", "DefiningSurface")
                        .WithMany()
                        .HasForeignKey("DefiningSurfaceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.GeometricVolumes.GeometricVolume", null)
                        .WithOne()
                        .HasForeignKey("PR.Domain.Entities.C2IEDM.Geometry.Locations.GeometricVolumes.ConeVolume", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Points.Point", "VertexPoint")
                        .WithMany()
                        .HasForeignKey("VertexPointID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DefiningSurface");

                    b.Navigation("VertexPoint");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.GeometricVolumes.SphereVolume", b =>
                {
                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Points.Point", "CentrePoint")
                        .WithMany()
                        .HasForeignKey("CentrePointID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.GeometricVolumes.GeometricVolume", null)
                        .WithOne()
                        .HasForeignKey("PR.Domain.Entities.C2IEDM.Geometry.Locations.GeometricVolumes.SphereVolume", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CentrePoint");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.GeometricVolumes.SurfaceVolume", b =>
                {
                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.Surface", "DefiningSurface")
                        .WithMany()
                        .HasForeignKey("DefiningSurfaceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.GeometricVolumes.GeometricVolume", null)
                        .WithOne()
                        .HasForeignKey("PR.Domain.Entities.C2IEDM.Geometry.Locations.GeometricVolumes.SurfaceVolume", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefiningSurface");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.Points.AbsolutePoint", b =>
                {
                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Points.Point", null)
                        .WithOne()
                        .HasForeignKey("PR.Domain.Entities.C2IEDM.Geometry.Locations.Points.AbsolutePoint", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.VerticalDistance", "VerticalDistance")
                        .WithMany()
                        .HasForeignKey("VerticalDistanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("VerticalDistance");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.Points.RelativePoint", b =>
                {
                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.CoordinateSystems.CoordinateSystem", "CoordinateSystem")
                        .WithMany()
                        .HasForeignKey("CoordinateSystemID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Points.Point", null)
                        .WithOne()
                        .HasForeignKey("PR.Domain.Entities.C2IEDM.Geometry.Locations.Points.RelativePoint", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoordinateSystem");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.CorridorArea", b =>
                {
                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Line.Line", "CenterLine")
                        .WithMany()
                        .HasForeignKey("CenterLineID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.Surface", null)
                        .WithOne()
                        .HasForeignKey("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.CorridorArea", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CenterLine");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.Ellipse", b =>
                {
                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Points.Point", "CentrePoint")
                        .WithMany()
                        .HasForeignKey("CentrePointID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Points.Point", "FirstConjugateDiameterPoint")
                        .WithMany()
                        .HasForeignKey("FirstConjugateDiameterPointID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.Surface", null)
                        .WithOne()
                        .HasForeignKey("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.Ellipse", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Points.Point", "SecondConjugateDiameterPoint")
                        .WithMany()
                        .HasForeignKey("SecondConjugateDiameterPointID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CentrePoint");

                    b.Navigation("FirstConjugateDiameterPoint");

                    b.Navigation("SecondConjugateDiameterPoint");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.FanArea", b =>
                {
                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.Surface", null)
                        .WithOne()
                        .HasForeignKey("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.FanArea", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Points.Point", "VertexPoint")
                        .WithMany()
                        .HasForeignKey("VertexPointID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VertexPoint");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.OrbitArea", b =>
                {
                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Points.Point", "FirstPoint")
                        .WithMany()
                        .HasForeignKey("FirstPointID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.Surface", null)
                        .WithOne()
                        .HasForeignKey("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.OrbitArea", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Points.Point", "SecondPoint")
                        .WithMany()
                        .HasForeignKey("SecondPointID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FirstPoint");

                    b.Navigation("SecondPoint");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.PolyArcArea", b =>
                {
                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Points.Point", "BearingOriginPoint")
                        .WithMany()
                        .HasForeignKey("BearingOriginPointID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Line.Line", "DefiningLine")
                        .WithMany()
                        .HasForeignKey("DefiningLineID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.Surface", null)
                        .WithOne()
                        .HasForeignKey("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.PolyArcArea", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BearingOriginPoint");

                    b.Navigation("DefiningLine");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.PolygonArea", b =>
                {
                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Line.Line", "BoundingLine")
                        .WithMany()
                        .HasForeignKey("BoundingLineID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.Surface", null)
                        .WithOne()
                        .HasForeignKey("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.PolygonArea", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoundingLine");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.TrackArea", b =>
                {
                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Points.Point", "BeginPoint")
                        .WithMany()
                        .HasForeignKey("BeginPointID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Points.Point", "EndPoint")
                        .WithMany()
                        .HasForeignKey("EndPointID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.Surface", null)
                        .WithOne()
                        .HasForeignKey("PR.Domain.Entities.C2IEDM.Geometry.Locations.Surfaces.TrackArea", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BeginPoint");

                    b.Navigation("EndPoint");
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.ObjectItems.Organisations.Unit", b =>
                {
                    b.HasOne("PR.Domain.Entities.C2IEDM.ObjectItems.Organisations.Organisation", null)
                        .WithOne()
                        .HasForeignKey("PR.Domain.Entities.C2IEDM.ObjectItems.Organisations.Unit", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PR.Domain.Entities.C2IEDM.Geometry.Locations.Line.Line", b =>
                {
                    b.Navigation("LinePoints");
                });
#pragma warning restore 612, 618
        }
    }
}
