// <auto-generated />
using System;
using C2IEDM.Web.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace C2IEDM.Web.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.CoordinateSystems.CoordinateSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Superseded")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CoordinateSystems");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.Line.LinePoint", b =>
                {
                    b.Property<Guid>("LineId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LineObjectId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PointId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PointObjectId")
                        .HasColumnType("TEXT");

                    b.Property<int>("SequenceQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Superseded")
                        .HasColumnType("TEXT");

                    b.HasKey("LineId", "Index");

                    b.HasIndex("PointId");

                    b.ToTable("LinePoints");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Superseded")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.VerticalDistance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<double>("Dimension")
                        .HasColumnType("REAL");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Superseded")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("VerticalDistances");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.ObjectItems.ObjectItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AlternativeIdentificationText")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Superseded")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ObjectItems");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Dead")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nickname")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .HasColumnType("TEXT");

                    b.Property<string>("ZipCode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("C2IEDM.Web.Persistence.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.CoordinateSystems.PointReference", b =>
                {
                    b.HasBaseType("C2IEDM.Domain.Entities.Geometry.CoordinateSystems.CoordinateSystem");

                    b.Property<Guid>("OriginPointId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("XVectorPointId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("YVectorPointId")
                        .HasColumnType("TEXT");

                    b.HasIndex("OriginPointId");

                    b.HasIndex("XVectorPointId");

                    b.HasIndex("YVectorPointId");

                    b.ToTable("PointReferences");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.GeometricVolumes.GeometricVolume", b =>
                {
                    b.HasBaseType("C2IEDM.Domain.Entities.Geometry.Locations.Location");

                    b.Property<Guid?>("LowerVerticalDistanceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UpperVerticalDistanceId")
                        .HasColumnType("TEXT");

                    b.HasIndex("LowerVerticalDistanceId");

                    b.HasIndex("UpperVerticalDistanceId");

                    b.ToTable("GeometricVolumes");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.Line.Line", b =>
                {
                    b.HasBaseType("C2IEDM.Domain.Entities.Geometry.Locations.Location");

                    b.ToTable("Lines");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.Points.Point", b =>
                {
                    b.HasBaseType("C2IEDM.Domain.Entities.Geometry.Locations.Location");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.Surface", b =>
                {
                    b.HasBaseType("C2IEDM.Domain.Entities.Geometry.Locations.Location");

                    b.ToTable("Surfaces");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.ObjectItems.Organisations.Organisation", b =>
                {
                    b.HasBaseType("C2IEDM.Domain.Entities.ObjectItems.ObjectItem");

                    b.Property<string>("NickName")
                        .HasColumnType("TEXT");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.GeometricVolumes.ConeVolume", b =>
                {
                    b.HasBaseType("C2IEDM.Domain.Entities.Geometry.Locations.GeometricVolumes.GeometricVolume");

                    b.Property<Guid>("DefiningSurfaceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VertexPointId")
                        .HasColumnType("TEXT");

                    b.HasIndex("DefiningSurfaceId");

                    b.HasIndex("VertexPointId");

                    b.ToTable("ConeVolumes");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.GeometricVolumes.SphereVolume", b =>
                {
                    b.HasBaseType("C2IEDM.Domain.Entities.Geometry.Locations.GeometricVolumes.GeometricVolume");

                    b.Property<Guid>("CentrePointId")
                        .HasColumnType("TEXT");

                    b.Property<double>("RadiusDimension")
                        .HasColumnType("REAL");

                    b.HasIndex("CentrePointId");

                    b.ToTable("SphereVolumes");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.GeometricVolumes.SurfaceVolume", b =>
                {
                    b.HasBaseType("C2IEDM.Domain.Entities.Geometry.Locations.GeometricVolumes.GeometricVolume");

                    b.Property<Guid>("DefiningSurfaceId")
                        .HasColumnType("TEXT");

                    b.HasIndex("DefiningSurfaceId");

                    b.ToTable("SurfaceVolumes");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.Points.AbsolutePoint", b =>
                {
                    b.HasBaseType("C2IEDM.Domain.Entities.Geometry.Locations.Points.Point");

                    b.Property<double>("LatitudeCoordinate")
                        .HasColumnType("REAL");

                    b.Property<double>("LongitudeCoordinate")
                        .HasColumnType("REAL");

                    b.Property<Guid?>("VerticalDistanceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("VerticalDistanceObjectId")
                        .HasColumnType("TEXT");

                    b.HasIndex("VerticalDistanceId");

                    b.ToTable("AbsolutePoints");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.Points.RelativePoint", b =>
                {
                    b.HasBaseType("C2IEDM.Domain.Entities.Geometry.Locations.Points.Point");

                    b.Property<Guid>("CoordinateSystemId")
                        .HasColumnType("TEXT");

                    b.Property<double>("XCoordinateDimension")
                        .HasColumnType("REAL");

                    b.Property<double>("YCoordinateDimension")
                        .HasColumnType("REAL");

                    b.Property<double>("ZCoordinateDimension")
                        .HasColumnType("REAL");

                    b.HasIndex("CoordinateSystemId");

                    b.ToTable("RelativePoints");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.CorridorArea", b =>
                {
                    b.HasBaseType("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.Surface");

                    b.Property<Guid>("CenterLineId")
                        .HasColumnType("TEXT");

                    b.Property<double>("WidthDimension")
                        .HasColumnType("REAL");

                    b.HasIndex("CenterLineId");

                    b.ToTable("CorridorAreas");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.Ellipse", b =>
                {
                    b.HasBaseType("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.Surface");

                    b.Property<Guid>("CentrePointId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FirstConjugateDiameterPointId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SecondConjugateDiameterPointId")
                        .HasColumnType("TEXT");

                    b.HasIndex("CentrePointId");

                    b.HasIndex("FirstConjugateDiameterPointId");

                    b.HasIndex("SecondConjugateDiameterPointId");

                    b.ToTable("Ellipses");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.FanArea", b =>
                {
                    b.HasBaseType("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.Surface");

                    b.Property<double>("MaximumRangeDimension")
                        .HasColumnType("REAL");

                    b.Property<double>("MinimumRangeDimension")
                        .HasColumnType("REAL");

                    b.Property<double>("OrientationAngle")
                        .HasColumnType("REAL");

                    b.Property<double>("SectorSizeAngle")
                        .HasColumnType("REAL");

                    b.Property<Guid>("VertexPointId")
                        .HasColumnType("TEXT");

                    b.HasIndex("VertexPointId");

                    b.ToTable("FanAreas");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.OrbitArea", b =>
                {
                    b.HasBaseType("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.Surface");

                    b.Property<Guid>("FirstPointId")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrbitAreaAlignmentCode")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SecondPointId")
                        .HasColumnType("TEXT");

                    b.Property<double>("WidthDimension")
                        .HasColumnType("REAL");

                    b.HasIndex("FirstPointId");

                    b.HasIndex("SecondPointId");

                    b.ToTable("OrbitAreas");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.PolyArcArea", b =>
                {
                    b.HasBaseType("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.Surface");

                    b.Property<double>("ArcRadiusDimension")
                        .HasColumnType("REAL");

                    b.Property<Guid>("BearingOriginPointId")
                        .HasColumnType("TEXT");

                    b.Property<double>("BeginBearingAngle")
                        .HasColumnType("REAL");

                    b.Property<Guid>("DefiningLineId")
                        .HasColumnType("TEXT");

                    b.Property<double>("EndBearingAngle")
                        .HasColumnType("REAL");

                    b.HasIndex("BearingOriginPointId");

                    b.HasIndex("DefiningLineId");

                    b.ToTable("PolyArcAreas");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.PolygonArea", b =>
                {
                    b.HasBaseType("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.Surface");

                    b.Property<Guid>("BoundingLineId")
                        .HasColumnType("TEXT");

                    b.HasIndex("BoundingLineId");

                    b.ToTable("PolygonAreas");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.TrackArea", b =>
                {
                    b.HasBaseType("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.Surface");

                    b.Property<Guid>("BeginPointId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EndPointId")
                        .HasColumnType("TEXT");

                    b.Property<double>("LeftWidthDimension")
                        .HasColumnType("REAL");

                    b.Property<double>("RightWidthDimension")
                        .HasColumnType("REAL");

                    b.HasIndex("BeginPointId");

                    b.HasIndex("EndPointId");

                    b.ToTable("TrackAreas");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.ObjectItems.Organisations.Unit", b =>
                {
                    b.HasBaseType("C2IEDM.Domain.Entities.ObjectItems.Organisations.Organisation");

                    b.Property<string>("FormalAbbreviatedName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.Line.LinePoint", b =>
                {
                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Line.Line", "Line")
                        .WithMany("LinePoints")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Points.Point", "Point")
                        .WithMany()
                        .HasForeignKey("PointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Line");

                    b.Navigation("Point");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("C2IEDM.Web.Persistence.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("C2IEDM.Web.Persistence.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C2IEDM.Web.Persistence.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("C2IEDM.Web.Persistence.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.CoordinateSystems.PointReference", b =>
                {
                    b.HasOne("C2IEDM.Domain.Entities.Geometry.CoordinateSystems.CoordinateSystem", null)
                        .WithOne()
                        .HasForeignKey("C2IEDM.Domain.Entities.Geometry.CoordinateSystems.PointReference", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Points.Point", "OriginPoint")
                        .WithMany()
                        .HasForeignKey("OriginPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Points.Point", "XVectorPoint")
                        .WithMany()
                        .HasForeignKey("XVectorPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Points.Point", "YVectorPoint")
                        .WithMany()
                        .HasForeignKey("YVectorPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OriginPoint");

                    b.Navigation("XVectorPoint");

                    b.Navigation("YVectorPoint");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.GeometricVolumes.GeometricVolume", b =>
                {
                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Location", null)
                        .WithOne()
                        .HasForeignKey("C2IEDM.Domain.Entities.Geometry.Locations.GeometricVolumes.GeometricVolume", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C2IEDM.Domain.Entities.Geometry.VerticalDistance", "LowerVerticalDistance")
                        .WithMany()
                        .HasForeignKey("LowerVerticalDistanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("C2IEDM.Domain.Entities.Geometry.VerticalDistance", "UpperVerticalDistance")
                        .WithMany()
                        .HasForeignKey("UpperVerticalDistanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LowerVerticalDistance");

                    b.Navigation("UpperVerticalDistance");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.Line.Line", b =>
                {
                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Location", null)
                        .WithOne()
                        .HasForeignKey("C2IEDM.Domain.Entities.Geometry.Locations.Line.Line", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.Points.Point", b =>
                {
                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Location", null)
                        .WithOne()
                        .HasForeignKey("C2IEDM.Domain.Entities.Geometry.Locations.Points.Point", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.Surface", b =>
                {
                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Location", null)
                        .WithOne()
                        .HasForeignKey("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.Surface", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.ObjectItems.Organisations.Organisation", b =>
                {
                    b.HasOne("C2IEDM.Domain.Entities.ObjectItems.ObjectItem", null)
                        .WithOne()
                        .HasForeignKey("C2IEDM.Domain.Entities.ObjectItems.Organisations.Organisation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.GeometricVolumes.ConeVolume", b =>
                {
                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.Surface", "DefiningSurface")
                        .WithMany()
                        .HasForeignKey("DefiningSurfaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.GeometricVolumes.GeometricVolume", null)
                        .WithOne()
                        .HasForeignKey("C2IEDM.Domain.Entities.Geometry.Locations.GeometricVolumes.ConeVolume", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Points.Point", "VertexPoint")
                        .WithMany()
                        .HasForeignKey("VertexPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DefiningSurface");

                    b.Navigation("VertexPoint");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.GeometricVolumes.SphereVolume", b =>
                {
                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Points.Point", "CentrePoint")
                        .WithMany()
                        .HasForeignKey("CentrePointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.GeometricVolumes.GeometricVolume", null)
                        .WithOne()
                        .HasForeignKey("C2IEDM.Domain.Entities.Geometry.Locations.GeometricVolumes.SphereVolume", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CentrePoint");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.GeometricVolumes.SurfaceVolume", b =>
                {
                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.Surface", "DefiningSurface")
                        .WithMany()
                        .HasForeignKey("DefiningSurfaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.GeometricVolumes.GeometricVolume", null)
                        .WithOne()
                        .HasForeignKey("C2IEDM.Domain.Entities.Geometry.Locations.GeometricVolumes.SurfaceVolume", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefiningSurface");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.Points.AbsolutePoint", b =>
                {
                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Points.Point", null)
                        .WithOne()
                        .HasForeignKey("C2IEDM.Domain.Entities.Geometry.Locations.Points.AbsolutePoint", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C2IEDM.Domain.Entities.Geometry.VerticalDistance", "VerticalDistance")
                        .WithMany()
                        .HasForeignKey("VerticalDistanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("VerticalDistance");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.Points.RelativePoint", b =>
                {
                    b.HasOne("C2IEDM.Domain.Entities.Geometry.CoordinateSystems.CoordinateSystem", "CoordinateSystem")
                        .WithMany()
                        .HasForeignKey("CoordinateSystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Points.Point", null)
                        .WithOne()
                        .HasForeignKey("C2IEDM.Domain.Entities.Geometry.Locations.Points.RelativePoint", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoordinateSystem");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.CorridorArea", b =>
                {
                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Line.Line", "CenterLine")
                        .WithMany()
                        .HasForeignKey("CenterLineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.Surface", null)
                        .WithOne()
                        .HasForeignKey("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.CorridorArea", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CenterLine");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.Ellipse", b =>
                {
                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Points.Point", "CentrePoint")
                        .WithMany()
                        .HasForeignKey("CentrePointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Points.Point", "FirstConjugateDiameterPoint")
                        .WithMany()
                        .HasForeignKey("FirstConjugateDiameterPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.Surface", null)
                        .WithOne()
                        .HasForeignKey("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.Ellipse", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Points.Point", "SecondConjugateDiameterPoint")
                        .WithMany()
                        .HasForeignKey("SecondConjugateDiameterPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CentrePoint");

                    b.Navigation("FirstConjugateDiameterPoint");

                    b.Navigation("SecondConjugateDiameterPoint");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.FanArea", b =>
                {
                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.Surface", null)
                        .WithOne()
                        .HasForeignKey("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.FanArea", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Points.Point", "VertexPoint")
                        .WithMany()
                        .HasForeignKey("VertexPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VertexPoint");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.OrbitArea", b =>
                {
                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Points.Point", "FirstPoint")
                        .WithMany()
                        .HasForeignKey("FirstPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.Surface", null)
                        .WithOne()
                        .HasForeignKey("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.OrbitArea", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Points.Point", "SecondPoint")
                        .WithMany()
                        .HasForeignKey("SecondPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FirstPoint");

                    b.Navigation("SecondPoint");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.PolyArcArea", b =>
                {
                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Points.Point", "BearingOriginPoint")
                        .WithMany()
                        .HasForeignKey("BearingOriginPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Line.Line", "DefiningLine")
                        .WithMany()
                        .HasForeignKey("DefiningLineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.Surface", null)
                        .WithOne()
                        .HasForeignKey("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.PolyArcArea", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BearingOriginPoint");

                    b.Navigation("DefiningLine");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.PolygonArea", b =>
                {
                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Line.Line", "BoundingLine")
                        .WithMany()
                        .HasForeignKey("BoundingLineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.Surface", null)
                        .WithOne()
                        .HasForeignKey("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.PolygonArea", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoundingLine");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.TrackArea", b =>
                {
                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Points.Point", "BeginPoint")
                        .WithMany()
                        .HasForeignKey("BeginPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Points.Point", "EndPoint")
                        .WithMany()
                        .HasForeignKey("EndPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.Surface", null)
                        .WithOne()
                        .HasForeignKey("C2IEDM.Domain.Entities.Geometry.Locations.Surfaces.TrackArea", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BeginPoint");

                    b.Navigation("EndPoint");
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.ObjectItems.Organisations.Unit", b =>
                {
                    b.HasOne("C2IEDM.Domain.Entities.ObjectItems.Organisations.Organisation", null)
                        .WithOne()
                        .HasForeignKey("C2IEDM.Domain.Entities.ObjectItems.Organisations.Unit", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("C2IEDM.Domain.Entities.Geometry.Locations.Line.Line", b =>
                {
                    b.Navigation("LinePoints");
                });
#pragma warning restore 612, 618
        }
    }
}
