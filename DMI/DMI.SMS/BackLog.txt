Done:
* Gør det muligt at kalde en async metode efter at have åbnet en dialog
* Gør det muligt at kalde MakeBreakfast fra command line applikationen
* Log på banen igen i DMI.SMS
  - Sikr, at logging til fil virker, lige som i DD. Det skal virke både når man kører gui'en og console appen (OK)
  - Byg et logging vindue som i DD (OK)
  - Skriv i loggen, hvor mange rækker, der loades op af fil repoet (OK)
  - Skriv i loggen, hvor mange rækker, der exporteres (OK)

Todo:
* Når man skal arbejde med DMI.SMS.UI.Console, skal man ikke genkompilere, dvs du skal have CommandLineParser på banen
* Sikr, at du kan exportere fra file repo med command line interfacet
* Man skal kunne tømme databasen fra brugergræsefladen
* Læs connection info fra en settings fil i stedet for at hardkode det
* Færdiggør funktionalitet til at eksportere
  - eksporter til json i stedet for xml
  - Lad brugeren vælge, om man skal exportere til xml eller json
  - Verificer, at export fra en underliggende file repo giver en fil, der er identisk med file repo filen
  - Mulighed for indskrænke sig til at eksportere det, der passerer filter settings
* Implement support for rolling back to an arbitrary date of interest
* Make is possible to extract the Frie Data station list 


Løst og fast:
- I den gamle DMI.Data.Studio har du nogle buttons, der er bundet til Async Commands. 
  Det har du for den sags skyld også her, hvor du checker settings... I command
  handlerne kan du fint kalde async metoder, MEN du har svært ved at kalde en async metode
  med udgangspunkt i at brugeren har trykket på en knap, der er bunder til en almindelig RelayCommand.
  Kan en løsning være at lave en variant af AsyncCommand, der modtager sådan et objekt der?
  Lige som RelayCommand<object>. Yes - der er faktisk en AsyncCommand<parameter> implementation i den artikel,
  du fanst i sin tid. and it works :-)