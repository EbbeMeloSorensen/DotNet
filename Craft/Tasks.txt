Done:
* Gør det muligt at tegne polylines lige som polygon

In progress:
* Prøv at lave det sådan, at ScatterChartViewModel abonnerer på at world window ændrer sig, og når det sker,
  så opdaterer den de punkter, der tegnes

Todo:
* Det kunne være fint, hvis man kunne bede GeometryEditorViewModellen om at beregne en bounding box og så sætte WorldWindow til det.
* Der er en lille fejl, når man resizer Viewporten - så hopper World Window
* Gør det muligt at tegne et koordinatsystem i MathematicalGeometryEditorViewModel
  - Det må gerne udfylde den tilgængelige plads
  - Hvis World Window ikke intersecter en akse, er det fint, hvis man somehow kan se den alligevel
* Når man exporterer grafer, så skal der kun en label på noder, der faktisk har en label
* Få gjort det færdigt med at have en label på en edge
  o en edge skal ikke bare have en data property - den skal have en ArrayList property ligesom node allerede har (OK)
* IGraph er lidt for bloated - det er f.eks. ikke hensigtsmæssigt, at den har metoderne GetNodeLabel og GetEdgeLabel. Det er sådan set heller ikke
  optimalt, at den har metoden GetCost, da edges i en graf jo altså ikke behøver at have en cost.
  Måske burde man konsekvent operere med, at f.eks. cost og labels hører til de nodes og edges, som kan hives ud af en graf.
  Der skal i øvrigt gælde, at der kan være mere end 1 edge fra en node til en anden, f.eks. med forskellige labels.
  Edges og nodes bør ikke nødvendigvis have ids.. eller hvad..
  Når du skriver en graf til fil, så traverserer du nodes, og for hver node traverserer du Neighbor ids. Så var det nok bedre at traversere
  "outgoing edges"
  o Tilføj en mulighed for at hive outgoing edges for en node (OK)
  o Lav Dijkstra-algoritmen om så den bruger den nye konstruktion (OK)
  o Fjern GetCost fra IGraph (OK)
  o Etabler et alternativ til IGraph.GetNodeLabel, så man kan få fat i noden og spørge DEN om dens label (OK)
  o Sikr at du kan eksportere til graphml med den nye mekanisme (OK)
  o Fjern GetNodeLabel fra IGraph.  (OK)

Ser